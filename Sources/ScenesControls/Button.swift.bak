/*
ScenesControls provides a Swift object library with support for common
controls.  ScenesControls runs on top of Scenes and IGIS.
Copyright (C) 2020 Tango Golf Digital, LLC
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

import Igis
import Scenes

public class Button : RenderableEntity,
                      EntityMouseEnterHandler, EntityMouseLeaveHandler,
                      EntityMouseDownHandler, MouseUpHandler,
                      EntityMouseClickHandler
{
    public typealias ButtonClickHandler = (_ button:Button) -> Void
      
    private static let hoverCursorStyle  = CursorStyle.Style.pointer
    private static let normalCursorStyle = CursorStyle.Style.defaultCursor
    private static let buttonDownOffset  = Point(x:2, y:2)
      
    private var _specifiedTopLeft : Point
    private var _specifiedSize : Size?
    private var _buttonClickHandler : ButtonClickHandler?
    private let controlStyle : ControlStyle

    private let text : Text
    private let textMetric : TextMetric
    private var buttonRect : Rect? = nil
    private var buttonPath : Path? = nil

    private var isMouseOver = false
    private var isMouseDown = false
    private var cursorStyle : CursorStyle.Style? = nil

    public init(topLeft:Point, label:String, 
                buttonClickHandler:ButtonClickHandler?=nil, size:Size?=nil,
                controlStyle:ControlStyle = ControlStyle()) {
        // Preserve the location and size
        self._specifiedTopLeft  = topLeft
        self._buttonClickHandler = buttonClickHandler
        self._specifiedSize      = size
        self.controlStyle       = controlStyle

        // Create the text object
        // The alignment and baseline are always centered so the text is in the
        // cneter of the button
        text = Text(location:_specifiedTopLeft, text:label, fillMode:controlStyle.textFillMode)
        text.font = controlStyle.font
        text.alignment = .center
        text.baseline = .middle

        // The TextMetric object is based off of the Text
        textMetric = TextMetric(fromText:text)
    }

    public var buttonClickHandler : ButtonClickHandler? {
        get {
            return _buttonClickHandler
        }
        set {
            _buttonClickHandler = newValue
        }
    }

    public var label : String {
        get {
            return text.text
        }
        set {
            text.text = newValue
            textMetric.text = newValue
            buttonRect = nil // Force recalculation
        }
    }

    public var size : Size? {
        get {
            return _specifiedSize ?? buttonRect?.size
        }
        set {
            _specifiedSize = newValue
            buttonRect = nil // Force recalculation
        }
    }

    public var topLeft : Point {
        get {
            return _specifiedTopLeft
        }
        set {
            _specifiedTopLeft = newValue
            buttonRect = nil // Force recalculation
        }
    }
    
    public override func setup(canvasSize:Size, canvas:Canvas) {
        canvas.setup(textMetric)
        dispatcher.registerEntityMouseEnterHandler(handler:self)
        dispatcher.registerEntityMouseLeaveHandler(handler:self)
        dispatcher.registerEntityMouseDownHandler(handler:self)
        dispatcher.registerMouseUpHandler(handler:self)
        dispatcher.registerEntityMouseClickHandler(handler:self)
    }

    public override func teardown() {
        dispatcher.unregisterEntityMouseClickHandler(handler:self)
        dispatcher.unregisterMouseUpHandler(handler:self)
        dispatcher.unregisterEntityMouseDownHandler(handler:self)
        dispatcher.unregisterEntityMouseLeaveHandler(handler:self)
        dispatcher.unregisterEntityMouseEnterHandler(handler:self)
    }

    public override func boundingRect() -> Rect {
        if let rect = buttonRect {
            return rect
        } else {
            return Rect()
        }
    }

    public override func calculate(canvasSize:Size) {
        // Determine the required size of the button (if required)
        if buttonRect == nil {
            recalculateBounds()
        }
    }

    private func recalculateBounds() {
        // If the size has been specified, we'll use that,
        // otherwise, we'll try to calculate it based on the metrics
        var rect : Rect? = nil
        if let size = _specifiedSize {
            rect = Rect(topLeft:_specifiedTopLeft, size:size)
        } else if let metrics = textMetric.currentMetrics {
            rect = metrics.fontBoundingBox()
            rect!.topLeft = _specifiedTopLeft
        }

        // At this point we'll have a rect if the size was specified or
        // if we calculated it based upon the metrics
        if rect != nil {
            // Account for the padding 
            rect!.inflate(by:controlStyle.padding)

            // Account for offset if mouse is down and the user is hovering over the button
            if isMouseOver && isMouseDown {
                rect!.topLeft += Self.buttonDownOffset
            }
            buttonRect = rect

            // Center the text
            text.location = rect!.center
            
            // Calculate rounding and construct a path
            let roundingRadius = Int(controlStyle.roundingPercentage * Double(min(rect!.size.width, rect!.size.height)))
            buttonPath = Path(rect:rect!, radius:roundingRadius, fillMode:.fillAndStroke)
        }
    }

    public override func render(canvas:Canvas) {
        // Determine metrics if required
        if textMetric.currentMetrics == nil {
            canvas.render(textMetric)
        } 

        // Draw button if ready
        if let buttonPath = buttonPath {
            let backgroundFillStyle = isMouseOver ? controlStyle.backgroundHoverFillStyle : controlStyle.backgroundFillStyle
            canvas.render(State(mode:.save))
            canvas.render(controlStyle.foregroundStrokeStyle, backgroundFillStyle, buttonPath)
            let clip = Clip(windingRule:.evenOdd) // Clip text to button
            canvas.render(clip, controlStyle.textStrokeStyle, controlStyle.textFillStyle, text)
            canvas.render(State(mode:.restore))
        }

        // Update cursor style if required
        if isMouseOver && (cursorStyle != Self.hoverCursorStyle) {
            let nextCursorStyle = CursorStyle(style:Self.hoverCursorStyle)
            canvas.render(nextCursorStyle)
            cursorStyle = Self.hoverCursorStyle
        }
        if !isMouseOver && (cursorStyle != Self.normalCursorStyle) {
            let nextCursorStyle = CursorStyle(style:Self.normalCursorStyle)
            canvas.render(nextCursorStyle)
            cursorStyle = Self.normalCursorStyle
        }
        
    }

    public func onEntityMouseEnter(globalLocation:Point) {
        isMouseOver = true
        recalculateBounds()
    }

    public func onEntityMouseLeave(globalLocation:Point) {
        isMouseOver = false
        recalculateBounds()
    }

    public func onEntityMouseDown(globalLocation:Point) {
        isMouseDown = true
        recalculateBounds()
    }

    public func onMouseUp(globalLocation:Point) {
        isMouseDown = false
        recalculateBounds()
    }

    public func onEntityMouseClick(globalLocation:Point) {
        if let buttonClickHandler = buttonClickHandler {
            buttonClickHandler(self)
        }
    }
}
